/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * An index entry for a {@link IStream}.  
 * <p>  
 * Some ContainerFormats can maintain index of where key-frames  
 * (and other interesting frames) can be found in a byte-stream.  
 * This is really helpful for implementing efficient seeking (for  
 * example, you can find all index entries near a desired timestamp, 
 *  
 * and you'll find the nearest key-frame).  
 * </p>  
 * <p>  
 * We don't maintain a complete list of all ContainerFormats that support 
 *  
 * index, but if they do, you can query the {@link IStream#getNumIndexEntries()} 
 *  
 * method to find how many entires are in the index. Some ContainerFormats 
 * can  
 * parse the relevant Container message if an index is embedded in the 
 *  
 * container (for example, the MOV and MP4 demuxer can do this). Other 
 *  
 * ContainerFormats can create an index automatically as they read the 
 * file,  
 * even if an index is not embedded in the container (for example the 
 * FLV  
 * demuxer does this).  
 * </p>  
 * @see		IStream#findTimeStampEntryInIndex(long, int)  
 * @see		IStream#findTimeStampPositionInIndex(long, int)  
 * @see		IStream#getIndexEntry(int)  
 * @see		IStream#getNumIndexEntries()  
 * @see		IStream#getIndexEntries()  
 * @since	3.4  
 */
public class IIndexEntry extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IIndexEntry(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.SWIGIIndexEntryUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IIndexEntry(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.SWIGIIndexEntryUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IIndexEntry obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IIndexEntry object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IIndexEntry copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IIndexEntry(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IIndexEntry)
      equal = (((IIndexEntry)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
   /**
   * info about this entry.
   * @return information about this entry.
   */
   
  @Override
  public String toString()
  {
    StringBuilder result = new StringBuilder();
    
    result.append(this.getClass().getName()+"@"+hashCode()+"[");
    result.append("position:"+getPosition()+";");
    result.append("timestamp:"+getTimeStamp()+";");
    result.append("flags:"+getFlags()+";");
    result.append("size:"+getSize()+";");
    result.append("min-distance:"+getMinDistance()+";");
    result.append("]");
    return result.toString();
  }

 

/**
 * Create a new {@link IIndexEntry} with the specified  
 * values.  
 * @param	position The value to be returned from {@link #getPosition()}. 
 *		  
 * @param	timeStamp The value to be returned from {@link #getTimeStamp()}. 
 *		  
 *  
 * @param	size The value to be returned from {@link #getSize()}.  
 * @param	minDistance The value to be returned from {@link #getMinDistance()}. 
 *		  
 */
  public static IIndexEntry make(long position, long timeStamp, int flags, int size, int minDistance) {
    long cPtr = XugglerJNI.IIndexEntry_make(position, timeStamp, flags, size, minDistance);
    return (cPtr == 0) ? null : new IIndexEntry(cPtr, false);
  }

/**
 * The position in bytes of the frame corresponding to this index entry 
 *  
 * in the {@link IContainer}.  
 * @return	The byte-offset from start of the IContainer where the  
 * frame for this {@link IIndexEntry} can be found.  
 */
  public long getPosition() {
    return XugglerJNI.IIndexEntry_getPosition(swigCPtr, this);
  }

/**
 * The actual time stamp, in units of {@link IStream#getTimeBase()}, 
 * of the frame this entry points to.  
 * @return	The time stamp for this entry.  
 */
  public long getTimeStamp() {
    return XugglerJNI.IIndexEntry_getTimeStamp(swigCPtr, this);
  }

/**
 * Flags set for this entry. See the IINDEX_FLAG* constants  
 * above.  
 * @return	the flags.  
 */
  public int getFlags() {
    return XugglerJNI.IIndexEntry_getFlags(swigCPtr, this);
  }

/**
 * The size of bytes of the frame this index entry points to.  
 * @return	The size in bytes.  
 */
  public int getSize() {
    return XugglerJNI.IIndexEntry_getSize(swigCPtr, this);
  }

/**
 * Minimum number of index entries between this index entry  
 * and the last keyframe in the index, used to avoid unneeded searching. 
 *  
 * @return	the minimum distance, in bytes.  
 */
  public int getMinDistance() {
    return XugglerJNI.IIndexEntry_getMinDistance(swigCPtr, this);
  }

/**
 * Is this index entry pointing to a key frame.  
 * Really shorthand for <code>{@link #getFlags()} &amp; {@link #IINDEX_FLAG_KEYFRAME}</code>. 
 *  
 * @return	True if this index entry is for a key frame.  
 */
  public boolean isKeyFrame() {
    return XugglerJNI.IIndexEntry_isKeyFrame(swigCPtr, this);
  }

/**
 * A bit mask value that may be set in {@link #getFlags}.  
 */
  public final static int IINDEX_FLAG_KEYFRAME = XugglerJNI.IIndexEntry_IINDEX_FLAG_KEYFRAME_get();
}

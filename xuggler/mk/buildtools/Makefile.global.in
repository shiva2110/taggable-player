# Copyright (c) 2009 by Xuggle Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# It is REQUESTED BUT NOT REQUIRED if you use this library, that you let 
# us know by sending e-mail to info\@xuggle.com telling us briefly how you're
# using the library and what you like or don't like about it.

# This file contains global rules that all Makefiles should know about.
# It should NOT be generated by AutoMake, but should be generated by Autoconf

# Note: You should only include this from Automake generated
# make files, as they will make sure all the variables from
# configure have been set corectly as $(MAKE) variables.

# NOTE: The captive directories MUST appear before any other includes
AM_CPPFLAGS=-I@abs_top_builddir@/captive/stage@includedir@
AM_CFLAGS=
AM_CXXFLAGS=
AM_LDFLAGS=-L@abs_top_builddir@/captive/stage@libdir@

# Note we may include includedir twice; most compilers will ignore that if
# $(DESTDIR) is actually empty
VS_INCLUDES=$(VS_JNI_INCLUDE) -I. -I$(srcdir) -I$(abs_top_srcdir)/csrc -I$(abs_top_builddir)/csrc -I$(DESTDIR)$(includedir) -I$(includedir) -I"$(XUGGLE_HOME)/include"
AM_CPPFLAGS+=$(VS_CPPFLAGS) $(VS_INCLUDES) -fno-strict-aliasing
# Note we include libdir twice; most compilers will ignore that if
# $(DESTDIR) is actually empty
AM_LDFLAGS+=$(VS_LDFLAGS) -L$(DESTDIR)$(libdir) -L$(libdir) -L"$(XUGGLE_HOME)/lib"

AM_CXXFLAGS+=-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -Wextra -Wformat -Wshadow -Wunused -Wreturn-type -Wall -Wno-ctor-dtor-privacy
ifdef VS_WARN_ISERROR
  AM_CXXFLAGS+=-Werror
endif
ifdef VS_OS_WINDOWS
  AM_CPPFLAGS+=-DVS_OS_WINDOWS=1
endif

VS_REVISION:= $(shell $(abs_top_srcdir)/mk/buildtools/revision.sh $(abs_top_srcdir) $(abs_top_srcdir)/LastRevisionBuilt.txt)
AM_CPPFLAGS+=-DVS_PRODUCT=$(VS_PRODUCT) -DVS_CPP_PACKAGE=$(VS_CPP_PACKAGE) -DVS_CPP_NAMESPACE=$(VS_CPP_NAMESPACE) -DVS_CPP_PATH=$(VS_CPP_PATH) -DVS_REVISION=$(VS_REVISION)
ifndef VS_TEST
  AM_CPPFLAGS+=-DVS_API_COMPILING
else
  VS_LDFLAGS+= -lstdc++
endif

ifdef VS_DEBUG
  AM_CPPFLAGS+=-DVS_DEBUG -g3 -O0
endif

ifdef VS_TEST
  AM_CPPFLAGS+=-I$(abs_top_srcdir)/mk/buildtools/cxxtest -I$(abs_top_srcdir)/test/csrc
  # Set the VS_TEST_FIXTUREDIR env variable to that tests can
  # find the fixtures directory for reading files
  export VS_TEST_FIXTUREDIR=$(abs_top_srcdir)/test/fixtures
  TESTS_ENVIRONMENT=$(LIBTOOL) --mode=execute
endif
ifdef VS_TEST_MEMCHECK
  export VALGRIND_SUPPRESSIONS=$(abs_top_srcdir)/mk/buildtools/Valgrind.suppressions
  export LIBTOOL
  export VALGRIND
  TESTS_ENVIRONMENT=$(LIBTOOL) --mode=execute $(abs_top_srcdir)/mk/buildtools/memcheck
#TESTS_ENVIRONMENT=echo
endif

ifdef VALGRIND
memcheck:
	$(MAKE) VS_TEST_MEMCHECK=1 check
else
.PHONY : memcheck
memcheck:
	@echo "You must have 'valgrind' installed on your system to run"
	@echo "the memcheck testsuite."
	@echo
	@echo "Valgrind is only available for Linux"
	@echo
	@echo "You can find out more about Valgrind at http://www.valgrind.org/"
	@echo
endif

SWIGOUTDIR=$(abs_top_srcdir)/generated/java
SWIGOUTCPPDIR=$(abs_top_srcdir)/generated/native
SWIGOUTTMPDIR=$(abs_top_builddir)/swig/java
SWIGOUTTMPCPPDIR=$(abs_top_builddir)/swig/native
SWIGEXT=.i
SWIGCPPEXT=.cpp
ifdef VS_SWIG
SWIG=@SWIG@
SWIGFLAGS=$(VS_INCLUDES)
SWIGFLAGS+=-DVS_PRODUCT=$(VS_PRODUCT) -DVS_REVISION=$(VS_REVISION) -package $(VS_CPP_PACKAGE)

SWIGCOMPILE=$(SWIG) $(SWIGFLAGS)

ifdef VS_WARN_ISERROR
SWIGFLAGS+=-Werror
endif

# Regnerate the SWIG CPP files, and copy into the generated tree
# But we only copy into the generated tree if write permission is granted
# so that distcheck does the right thing
%$(SWIGCPPEXT): $(srcdir)/%$(SWIGEXT)
	$(MKDIR_P) $(SWIGOUTDIR)/$(VS_CPP_PATH)
	$(MKDIR_P) $(SWIGOUTCPPDIR)/$(VS_CPP_PATH)
	$(MKDIR_P) $(SWIGOUTTMPDIR)/$(VS_CPP_PATH)
	$(MKDIR_P) $(SWIGOUTTMPCPPDIR)/$(VS_CPP_PATH)
	$(SWIGCOMPILE) -outdir $(SWIGOUTTMPDIR)/$(VS_CPP_PATH) -c++ -java -o $@ $< 
	if test -w $(SWIGOUTCPPDIR)/$(VS_CPP_PATH) ; then \
	  cp $@ $(SWIGOUTCPPDIR)/$(VS_CPP_PATH) ; \
	fi
	if test -w $(SWIGOUTDIR)/$(VS_CPP_PATH) ; then \
	  cp $(SWIGOUTTMPDIR)/$(VS_CPP_PATH)/* $(SWIGOUTDIR)/$(VS_CPP_PATH); \
	fi

# This used be be a command we used
#	@$(SWIGCOMPILE) -c++ -java -o $@ $< || (\
#	  echo "---------------- WARNING! ----------------" && \
#	  echo "Swig could not generate the output files, but" && \
#	  echo "we don't want that to stop you.  So we're going" && \
#	  echo "to try copying over some lovely files we prepared" && \
#	  echo "earlier:" && \
#	  echo "  $(SWIGOUTCPPDIR)/$(VS_CPP_PATH)/*.cpp to $@" && \
#	  cp $(SWIGOUTCPPDIR)/$(VS_CPP_PATH)/*.cpp .)

.PHONY: refreshswig
refreshswig:
	if test -f $(srcdir)/*$(SWIGEXT); then touch $(srcdir)/*$(SWIGEXT); fi
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) refreshswig); \
	 done
else
%$(SWIGCPPEXT): $(srcdir)/%$(SWIGEXT)
	@echo "---------------- WARNING! ----------------"
	@echo "Swig input file output file ($@) is out of date,"
	@echo "because of $<"
	@echo "but Swig is not available on this computer."
	@echo ""
	@echo "To work around, We have copied a previously"
	@echo "generated copy of $@ from "
	@echo "$(SWIGOUTCPDIR)/$(VS_CPP_PATH)."
	@echo ""
	@cp $(SWIGOUTCPPDIR)/$(VS_CPP_PATH)/*.cpp . 

# Do nothing
.PHONY: refreshswig
refreshswig:
	@:
endif

ifdef PERL
%_CXXRunner.cpp : $(srcdir)/%.h
	$(PERL) -w $(abs_top_srcdir)/mk/buildtools/cxxtest/cxxtestgen.pl  --have-eh --have-std --abort-on-fail -o $@ $<
else
%_CXXRunner.cpp : $(srcdir)/%.h
	@echo "---------------- ERROR! ----------------"
	@echo "Test input file output file ($@) is out of date,"
	@echo "because of $<"
	@echo "but Perl is not available on this computer."
	@echo "We need Perl to rebuild the test runner."
	@echo "Please re-run configure with perl in your path."
	@echo ""
	@echo "---------------- ERROR! ----------------"
	@false
endif

# These rules are for the "captive build" system
vs_captive_prefix=$(abs_top_builddir)/captive
# These rules are needed for first time builders; it ensure
# linking against ffmpeg can actually find the captive libraries
# like speex and mp3lame
export PATH := ${vs_captive_prefix}@bindir@$(PATH_SEPARATOR)$(PATH)
export LD_LIBRARY_PATH := ${vs_captive_prefix}@libdir@$(PATH_SEPARATOR)$(LD_LIBRARY_PATH)
export DYLD_LIBRARY_PATH := ${vs_captive_prefix}@libdir@$(PATH_SEPARATOR)$(DYLD_LIBRARY_PATH)

# This rule makes sure the captive Makefile is created,
# and is regenerated if the captive configure script
# changes
$(abs_builddir)/csrc/Makefile : $(srcdir)/csrc/configure
	@echo "Incarcerated package must be reconfigured; regenerating out of date captive Makefile from: $(srcdir)/csrc/configure"
	$(MKDIR_P) csrc
	cd csrc && sh ../incarcerate

# This rule takes a captive package and configures it for
# the build.  Every target in the wrapper makefile
# should call this first.
.PHONY: incarcerate-package
incarcerate-package: $(abs_builddir)/csrc/Makefile
	@echo "Incarcerated package configured: $(srcdir)"
